<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>昕杰技术小站</title>
  
  <subtitle>后端 机器学习</subtitle>
  <link href="https://xinjieinformatik.github.io/atom.xml" rel="self"/>
  
  <link href="https://xinjieinformatik.github.io/"/>
  <updated>2020-09-10T16:07:21.206Z</updated>
  <id>https://xinjieinformatik.github.io/</id>
  
  <author>
    <name>Xinjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode_combination_39-40-216-377</title>
    <link href="https://xinjieinformatik.github.io/2020/09/10/leetcode-combination-39-40-216-377/"/>
    <id>https://xinjieinformatik.github.io/2020/09/10/leetcode-combination-39-40-216-377/</id>
    <published>2020-09-10T15:45:20.000Z</published>
    <updated>2020-09-10T16:07:21.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-组合系列"><a href="#leetcode-组合系列" class="headerlink" title="leetcode 组合系列"></a>leetcode 组合系列</h2><p>今天来做几个leetcode递归题，重点体会一下递归中的边界条件与递归控制，最后一题是动态规划，使用了从上到下的记忆化递归，可以体会下与递归的区别。题目本身不难，但是要一次ac还是对边界条件有考验，注意复杂度分析。<br><a id="more"></a></p><h4 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode-cn.com/problems/combination-sum/">39. 组合总和</a></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">给定一个无重复元素的数组</span> <span class="string">candidates</span> <span class="string">和一个目标数</span> <span class="string">target</span></span><br><span class="line"><span class="string">找出</span> <span class="string">candidates</span> <span class="string">中所有可以使数字和为</span> <span class="string">target</span> <span class="string">的组合。</span></span><br><span class="line"><span class="string">candidates</span> <span class="string">中的数字可以无限制重复被选取。</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">所有数字（包括</span> <span class="string">target）都是正整数。</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">解集不能包含重复的组合。</span></span><br><span class="line"></span><br><span class="line"><span class="string">输入：candidates</span> <span class="string">=</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>]<span class="string">,</span> <span class="string">target</span> <span class="string">=</span> <span class="number">7</span><span class="string">,</span></span><br><span class="line"><span class="string">所求解集为：</span></span><br><span class="line">[</span><br><span class="line">  [<span class="number">7</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">输入：candidates</span> <span class="string">=</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]<span class="string">,</span> <span class="string">target</span> <span class="string">=</span> <span class="number">8</span><span class="string">,</span></span><br><span class="line"><span class="string">所求解集为：</span></span><br><span class="line">[</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>巧用index避免重复项，注意边界条件子递归从index开始不用+1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span>(<span class="params">self, candidates: List[int], target: int</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        n = len(candidates)</span><br><span class="line">        candidates.sort()</span><br><span class="line">        result = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">index, res, target</span>):</span></span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index, n):</span><br><span class="line">                <span class="keyword">if</span> target - candidates[i] &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                helper(i, res+[candidates[i]], target-candidates[i])</span><br><span class="line"></span><br><span class="line">        helper(<span class="number">0</span>, [], target)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        sort(candidates.begin(), candidates.end());</span><br><span class="line">        helper(candidates, <span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> index, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.push_back(res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target - nums[i] &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            res.push_back(nums[i]);</span><br><span class="line">            helper(nums, i, target-nums[i]);</span><br><span class="line">            res.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a><a href="https://leetcode-cn.com/problems/combination-sum-ii/">40. 组合总和 II</a></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">给定一个数组</span> <span class="string">candidates</span> <span class="string">和一个目标数</span> <span class="string">target</span> <span class="string">，找出</span> <span class="string">candidates</span> <span class="string">中所有可以使数字和为</span> <span class="string">target</span> <span class="string">的组合。</span></span><br><span class="line"><span class="string">candidates</span> <span class="string">中的每个数字在每个组合中只能使用一次。</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">所有数字（包括目标数）都是正整数。</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">解集不能包含重复的组合。</span></span><br><span class="line"></span><br><span class="line"><span class="string">输入:</span> <span class="string">candidates</span> <span class="string">=</span> [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>]<span class="string">,</span> <span class="string">target</span> <span class="string">=</span> <span class="number">8</span><span class="string">,</span></span><br><span class="line"><span class="string">所求解集为:</span></span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">输入:</span> <span class="string">candidates</span> <span class="string">=</span> [<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]<span class="string">,</span> <span class="string">target</span> <span class="string">=</span> <span class="number">5</span><span class="string">,</span></span><br><span class="line"><span class="string">所求解集为:</span></span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>关键点：</p><ul><li>先sort然后通过candidates[i] != candidates[i-1]去重</li><li>i == index or candidates[i] != candidates[i-1] 该层递归首个元素可以和前一个元素一样，其他不可以<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span>(<span class="params">self, candidates: List[int], target: int</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        candidates.sort()</span><br><span class="line">        n = len(candidates)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">index, res, target</span>):</span></span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">                result.append(res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index, n):</span><br><span class="line">                <span class="keyword">if</span> (i == index <span class="keyword">or</span> candidates[i] != candidates[i<span class="number">-1</span>]):</span><br><span class="line">                    temp = target - candidates[i]</span><br><span class="line">                    <span class="keyword">if</span> temp &lt; <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    helper(i+<span class="number">1</span>, res+[candidates[i]], temp)</span><br><span class="line">        helper(<span class="number">0</span>, [], target)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        sort(candidates.begin(), candidates.end());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        helper(candidates, <span class="number">0</span>, target, &amp;result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> index, <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; *result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result-&gt;push_back(res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index || nums[i] != nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span> (target-nums[i] &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                res.push_back(nums[i]);</span><br><span class="line">                helper(nums, i+<span class="number">1</span>, target-nums[i], result);</span><br><span class="line">                res.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a><a href="https://leetcode-cn.com/problems/combination-sum-iii/">216. 组合总和 III</a></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">找出所有相加之和为</span> <span class="string">n</span> <span class="string">的</span> <span class="string">k</span> <span class="string">个数的组合。</span></span><br><span class="line"><span class="string">组合中只允许含有</span> <span class="number">1</span> <span class="string">-</span> <span class="number">9</span> <span class="string">的正整数，并且每种组合中不存在重复的数字。</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">所有数字都是正整数。</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">解集不能包含重复的组合。</span> </span><br><span class="line"></span><br><span class="line"><span class="string">输入:</span> <span class="string">k</span> <span class="string">=</span> <span class="number">3</span><span class="string">,</span> <span class="string">n</span> <span class="string">=</span> <span class="number">7</span></span><br><span class="line"><span class="string">输出:</span> [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]]</span><br><span class="line"><span class="string">示例</span> <span class="attr">2:</span></span><br><span class="line"></span><br><span class="line"><span class="string">输入:</span> <span class="string">k</span> <span class="string">=</span> <span class="number">3</span><span class="string">,</span> <span class="string">n</span> <span class="string">=</span> <span class="number">9</span></span><br><span class="line"><span class="string">输出:</span> [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>], [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>], [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span>(<span class="params">self, k: int, n: int</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">res, index, target</span>):</span></span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span> <span class="keyword">and</span> len(res) == k:</span><br><span class="line">                result.append(res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> len(res) == k:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index, <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> target-i &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                helper(res+[i], i+<span class="number">1</span>, target-i)</span><br><span class="line"></span><br><span class="line">        result = []</span><br><span class="line">        helper([], <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum3</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        len = k;</span><br><span class="line">        helper(<span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.size() == len <span class="keyword">and</span> target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.push_back(res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.size() == len) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target - i &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">            helper(i+<span class="number">1</span>, target-i);</span><br><span class="line">            res.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="377-组合总和-Ⅳ"><a href="#377-组合总和-Ⅳ" class="headerlink" title="377. 组合总和 Ⅳ"></a><a href="https://leetcode-cn.com/problems/combination-sum-iv/">377. 组合总和 Ⅳ</a></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">给定一个由正整数组成且不存在重复数字的数组，</span></span><br><span class="line"><span class="string">找出和为给定目标正整数的组合的个数。</span></span><br><span class="line"></span><br><span class="line"><span class="string">nums</span> <span class="string">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">target</span> <span class="string">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="string">所有可能的组合为：</span></span><br><span class="line"><span class="string">(1,</span> <span class="number">1</span><span class="string">,</span> <span class="number">1</span><span class="string">,</span> <span class="number">1</span><span class="string">)</span></span><br><span class="line"><span class="string">(1,</span> <span class="number">1</span><span class="string">,</span> <span class="number">2</span><span class="string">)</span></span><br><span class="line"><span class="string">(1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">1</span><span class="string">)</span></span><br><span class="line"><span class="string">(1,</span> <span class="number">3</span><span class="string">)</span></span><br><span class="line"><span class="string">(2,</span> <span class="number">1</span><span class="string">,</span> <span class="number">1</span><span class="string">)</span></span><br><span class="line"><span class="string">(2,</span> <span class="number">2</span><span class="string">)</span></span><br><span class="line"><span class="string">(3,</span> <span class="number">1</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="string">请注意，顺序不同的序列被视作不同的组合。</span></span><br><span class="line"><span class="string">因此输出为</span> <span class="number">7</span><span class="string">。</span></span><br><span class="line"></span><br><span class="line"><span class="string">进阶：</span></span><br><span class="line"><span class="string">如果给定的数组中含有负数会怎么样？</span></span><br><span class="line"><span class="string">问题会产生什么变化？</span></span><br><span class="line"><span class="string">我们需要在题目中添加什么限制来允许负数的出现？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum4</span>(<span class="params">self, nums: List[int], target: int</span>) -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        nums.sort()</span><br><span class="line"><span class="meta">        @functools.lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">res</span>):</span></span><br><span class="line">            <span class="keyword">if</span> res == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            ans = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                val = res + nums[i]</span><br><span class="line">                <span class="keyword">if</span> val &gt; target:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                ans += helper(val)</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dp;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp.count(target) != <span class="number">0</span>) <span class="keyword">return</span> dp[target];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target - nums[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                res += helper(nums, target-nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[target] = res;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;leetcode-组合系列&quot;&gt;&lt;a href=&quot;#leetcode-组合系列&quot; class=&quot;headerlink&quot; title=&quot;leetcode 组合系列&quot;&gt;&lt;/a&gt;leetcode 组合系列&lt;/h2&gt;&lt;p&gt;今天来做几个leetcode递归题，重点体会一下递归中的边界条件与递归控制，最后一题是动态规划，使用了从上到下的记忆化递归，可以体会下与递归的区别。题目本身不难，但是要一次ac还是对边界条件有考验，注意复杂度分析。&lt;br&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://xinjieinformatik.github.io/categories/leetcode/"/>
    
    
    <category term="递归" scheme="https://xinjieinformatik.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="动态规划" scheme="https://xinjieinformatik.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="dfs" scheme="https://xinjieinformatik.github.io/tags/dfs/"/>
    
    <category term="组合" scheme="https://xinjieinformatik.github.io/tags/%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客 github + hexo + NexT</title>
    <link href="https://xinjieinformatik.github.io/2020/09/09/build_your_blog_hexo/"/>
    <id>https://xinjieinformatik.github.io/2020/09/09/build_your_blog_hexo/</id>
    <published>2020-09-09T09:37:47.000Z</published>
    <updated>2020-09-10T13:47:40.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客-hexo"><a href="#搭建个人博客-hexo" class="headerlink" title="搭建个人博客 hexo"></a>搭建个人博客 hexo</h1><p>这篇文章介绍从0到1搭建个人博客, 基于 Github.io + hexo + NexT，完全免费也美观，对于个人博客来说完全够了，半天内可以搭建并自定义完成个人博客，推荐！<br><a id="more"></a></p><ul><li>基于github与hexo搭建博客，完全免费</li><li>hexo提供许多现成主题模板</li><li>经过配置后可使用latex。</li></ul><h2 id="建立-hexo-博客站点步骤"><a href="#建立-hexo-博客站点步骤" class="headerlink" title="建立 hexo 博客站点步骤"></a>建立 hexo 博客站点步骤</h2><ul><li>github 新建一个repository， 名称为 <code>你的GitHub用户名.github.io</code></li><li>确保NodeJS的安装目录与Git的安装目录在同一个文件夹下（<a href="https://stackoverflow.com/questions/45513441/npm-command-not-found-in-windows-10">参考</a>）</li><li>下载并安装NodeJS</li><li>下载并安装Git for Windows</li><li>打开Git bash 配置Git的用户名与邮箱为github用户名与邮箱，生成本地ssh并复制到github ssh上 （第一次使用Git设置，如果已经设置过，可以跳过该步骤）</li><li>选定一个文件夹作为存放博客文件的目录，以管理员身份打开Git bash， 并 cd 到该目录</li><li>导入nodejs路径到<code>git export PATH=$PATH:&quot;/D/path_to_nodejs&quot;</code> (windows path)</li><li>输入命令 <code>npm install hexo-cli -g</code></li><li>输入命令 <code>hexo init blog</code></li><li>输入命令 <code>cd blog</code></li><li>输入命令 <code>npm install</code></li><li>输入命令 <code>hexo s</code><br>s是server的缩写，表示启动本地服务器。默认情况下，访问网址是：<a href="http://localhost:4000/">http://localhost:4000/</a> 。如果成功的话可以看见官方的默认页面。</li><li>在blog文件夹下编辑_config.yml, 找到相应字段，修改如下<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://你的GitHub用户名.github.io/</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/你的GitHub用户名/你的GitHub用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li>输入命令<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li><li>10几20分钟后打开浏览器，输入你的网站地址：<a href="https://你的GitHub用户名.github.io/，就可以看到你的网站已经上线了">https://你的GitHub用户名.github.io/，就可以看到你的网站已经上线了</a></li></ul><h2 id="新建并发布文章"><a href="#新建并发布文章" class="headerlink" title="新建并发布文章"></a>新建并发布文章</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;newblog&quot;</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>在Git bash 命令行输入 hexo n “newblog”, 就可以看到在blog/source/_posts目录下多了一个newblog.md文件。写完之后生成、部署即可(运行 hexo g -d)。<br>要删除文章的话，直接把源文件删除即可（确保至少有一篇文章存在，否则可能出错）<br>同步到github.io通常要等待一段时间</p><h2 id="常用的配置"><a href="#常用的配置" class="headerlink" title="常用的配置"></a>常用的配置</h2><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>Hexo有许多好看的主题，以NexT主题为例（使用的是NexT 7.8.0版本）：<br>下载主题：Releases · theme-next/hexo-theme-next<br>解压所下载的压缩包至站点的 themes 目录下，并将解压后的文件夹名称（hexo-theme-next-x.x.x）更改为 next<br>打开站点配置文件_config.yml，找到 theme 字段，并将其值更改为 next ；找到 language 字段，并将其值更改为 zh-CN（在themes/next/languages目录下可查看主题支持的语言）<br>在切换主题之后，使用 hexo clean 命令来清除 Hexo 的缓存</p><h3 id="LaTeX支持"><a href="#LaTeX支持" class="headerlink" title="LaTeX支持"></a>LaTeX支持</h3><p><a href="https://theme-next.js.org/docs/third-party-services/math-equations.html">配置latex</a></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>安装一个能上传本地图片的插件：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><br>我一般会atom写markdown，多个blog的图片统一放在assets中</p><h3 id="文章添加tags-amp-category"><a href="#文章添加tags-amp-category" class="headerlink" title="文章添加tags&amp;category"></a>文章添加tags&amp;category</h3><p>设置blog\scaffolds\post, 每次 hexo n “new_blog” 默认会出现的标题<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 两数之和</span><br><span class="line">date: 2020-09-09 12:12:57</span><br><span class="line">categories:</span><br><span class="line">- leetcode</span><br><span class="line">tags:</span><br><span class="line">- 双指针</span><br><span class="line">- 哈希表</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h3 id="更换博客图片背景，设置透明度"><a href="#更换博客图片背景，设置透明度" class="headerlink" title="更换博客图片背景，设置透明度"></a>更换博客图片背景，设置透明度</h3><p>在 根目录/source下新建_data/styles.styl, 设置如下,<br>背景图片放在 根目录/source/images/<br>字体颜色等均可在这里改，覆盖全局参数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">// 整体背景设置</span><br><span class="line">body &#123;</span><br><span class="line">  background:url(/images/1_compress.jpg);// 设定背景图片,images同处于blog/<span class="built_in">source</span>文件夹下</span><br><span class="line"> background-repeat: no-repeat;// 设定背景图片非重复填充</span><br><span class="line">    background-attachment:fixed;// 设置背景图片不随页面滚动</span><br><span class="line">    background-position:50% 50%;// 设置背景图片位置</span><br><span class="line">  background-size: cover// 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章内容的透明度设置</span><br><span class="line">.content-wrap &#123;</span><br><span class="line">  opacity: 0.86;</span><br><span class="line">  color: <span class="comment">#000000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// sidebar侧边工具栏样式属性</span><br><span class="line">.sidebar&#123;</span><br><span class="line">  opacity: 0.86</span><br><span class="line">  color: <span class="comment">#000000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 页面头样式属性</span><br><span class="line">.header-inner &#123;</span><br><span class="line">  background: rgba(255,255,255,0.86);</span><br><span class="line">  color: <span class="comment">#000000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 页脚颜色</span><br><span class="line">.footer &#123;</span><br><span class="line">  color: <span class="comment">#DCDCDC;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 搜索框（local-search）的透明度设置</span><br><span class="line">.popup &#123;</span><br><span class="line">  opacity: 0.86;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 向上箭头</span><br><span class="line">.back-to-top &#123;</span><br><span class="line">    opacity: 1;</span><br><span class="line">    line-height: 2.8;</span><br><span class="line">    right: 35px;</span><br><span class="line">    padding-right: 5px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    padding-top: 2.5px;</span><br><span class="line">    padding-bottom: 2.5px;</span><br><span class="line">    background-color: rgba(28, 28, 28, 1);</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### next主题美化与第三方插件</span></span><br><span class="line">参考：</span><br><span class="line">- [NexT文档](https://theme-next.js.org/docs/)</span><br><span class="line">- [这个博客里有一系列教程,推荐!注意有些设置是低版本的](http://eternalzttz.com/hexo-next.html)</span><br><span class="line">- [hexo NexT 主题美化，注意有些设置是低版本的](https://tding.top/archives/42c38b10.html)</span><br><span class="line">- [Hexo-NexT 添加打字特效、鼠标点击特效](https://tding.top/archives/58cff12b.html)</span><br><span class="line">- [时钟特效](https://jrbcode.gitee.io/posts/c13e56cd.html)</span><br><span class="line">- [点击文章后从头开始阅读全文](https://blog.csdn.net/weizhixiang/article/details/105112467)</span><br><span class="line">- [next主题添加背景图片(无custom.styl情况)](https://blog.csdn.net/chrishly3/article/details/103992492)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 性能问题</span></span><br><span class="line">一开始我启用了 [tidio](https://www.tidio.com/panel/settings/live-chat/appearance) 在线聊天，busuanzi 站点访问统计</span><br><span class="line">分析网页加载性能时，瓶颈主要在他们。介于对我来说，他们没那么重要，我就把他们都<span class="built_in">disable</span>了，网页加载快了很多。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 关于TOC中文跳转失效的bug</span></span><br><span class="line">NexT 7.3 以后版本自带toc了，在主题的config.yml中<span class="built_in">enable</span>即可。</span><br><span class="line">```sh</span><br><span class="line">toc:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>但是遇到的问题是，当文章目录 toc 含有中文时，点击左侧目录栏无法正常跳转，查了很多资料，都没能解决（例如卸载hexo-toc（这东西就不用装）,标题文件命名规则等）。结果发现原来是js解析id的问题。。<br>打开node_modules\hexo\lib\plugins\helper\toc.js，修改如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const href = id ? `#$&#123;encodeURL(id)&#125;` : null;</span></span><br><span class="line"><span class="keyword">const</span> href = id ? <span class="string">`#<span class="subst">$&#123;id&#125;</span>`</span> : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><br>注意如果标题中含有空格，会被解析成-。但这些都不影响使用，把encodeURL去掉，就一切正常了。</p><h3 id="禁止部分markdown-gitalk-评论"><a href="#禁止部分markdown-gitalk-评论" class="headerlink" title="禁止部分markdown gitalk 评论"></a>禁止部分markdown gitalk 评论</h3><p>题头添加 comments: false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-09-09 13:26:08</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;搭建个人博客-hexo&quot;&gt;&lt;a href=&quot;#搭建个人博客-hexo&quot; class=&quot;headerlink&quot; title=&quot;搭建个人博客 hexo&quot;&gt;&lt;/a&gt;搭建个人博客 hexo&lt;/h1&gt;&lt;p&gt;这篇文章介绍从0到1搭建个人博客, 基于 Github.io + hexo + NexT，完全免费也美观，对于个人博客来说完全够了，半天内可以搭建并自定义完成个人博客，推荐！&lt;br&gt;</summary>
    
    
    
    <category term="hexo博客搭建" scheme="https://xinjieinformatik.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo博客搭建" scheme="https://xinjieinformatik.github.io/tags/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
